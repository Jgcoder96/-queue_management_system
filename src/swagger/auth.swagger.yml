tags:
  - name: auth 

paths: 

  /api/auth/users/register:
    post:
      tags: 
        - auth 
      summary: Register User 
      description: Endpoint for registering a user in the application
      operationId: registerUser 
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/registerUser'
      responses:
        '201':
          description: Register Successful
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/registerSuccessful'
        '400':
          description: Bad Request
          content:
            application/json:
              schema: 
                $ref: '#/components/schemas/zodError'
        '409':
          description: Conflict
          content:
            application/json:
              schema: 
                $ref: '#/components/schemas/recordAlreadyExists'
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema: 
                $ref: '#/components/schemas/internalServerError'
  
  /api/auth/users/login:
    post: 
      tags:
        - auth 
      summary: User Login
      description: Endpoint for user login to the application
      operationId: loginUser
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/login'
      responses:
        '200':
          description: Login Successful
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/loginSuccessful'
        '400':
          description: Bad Request
          content:
            application/json:
              schema: 
                $ref: '#/components/schemas/zodError'
        '401':
          description: Incorrect Password
          content:
            application/json:
              schema: 
                $ref: '#/components/schemas/incorrectPassword'
        '404':
          description: record not found
          content: 
            application/json:
              schema:
                $ref: '#/components/schemas/recordNotFound'
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema: 
                $ref: '#/components/schemas/internalServerError'

  /api/auth/users:
    get: 
      tags:
        - auth 
      summary: Get Users
      description: Endpoint for get users 
      operationId: getsUsers
      responses:
        '200':
          description: Users Successfully Obtained
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/getUsers'
        '500': 
          description: Internal Server Error 
          content:
            application/json:
              schema: 
                $ref: '#/components/schemas/internalServerError'

    put:
      tags:
        - auth
      summary: Update User
      description: Endpoint for put user
      operationId: putUser
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/updateUser'
      responses: 
        '200':
          description: The user update successfully
          content:
              application/json:
                schema:
                  $ref: '#/components/schemas/updateSuccessful'
        '404':
          description: record not found
          content: 
            application/json:
              schema:
                $ref: '#/components/schemas/recordNotFound'
        '500': 
          description: Internal Server Error
          content:
            application/json:
              schema: 
                $ref: '#/components/schemas/internalServerError'

    delete: 
      tags:
        - auth
      summary: Delete User
      description: Endpoint for delete user
      operationId: deleteUser
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/deleteUser'
      responses:
        '200':
          description: Delete User Successful
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/deleteSuccessful'
        '404':
          description: record not found
          content: 
            application/json:
              schema:
                $ref: '#/components/schemas/recordNotFound'
        '500': 
          description: Internal Server Error
          content:
            application/json:
              schema: 
                $ref: '#/components/schemas/internalServerError'

     
  /api/auth/users/{dni}:
    get:
      tags:
        - auth 
      summary: Get User by DNI
      description: Endpoint for getting a specific user by their DNI
      operationId: getUserByDni
      parameters:
        - name: dni
          in: path
          required: false
          description: The DNI of the user to retrieve
          schema:
            type: number
            example: 11222333
      responses:
        '200':
          description: User Successfully Obtained
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/getUsers'
        '404':
          description: record not found
          content: 
            application/json:
              schema:
                $ref: '#/components/schemas/recordNotFound'
        '500': 
          description: Internal Server Error
          content:
            application/json:
              schema: 
                $ref: '#/components/schemas/internalServerError'
      
components:
  schemas:

    registerUser:
      type: object 
      required:
        - name
        - lastName
        - dni
        - email
        - password
      properties:
        name:
          type: string
          example: name
        lastName:
          type: string 
          example: last name 
        dni:
          type: number
          example: 25542586
        email: 
          type: string 
          example: example@gmail.com
        password: 
          type: string
          example: Example*010203
        rol: 
          type: string
          example: 'USER'

    registerSuccessful:
      type: object
      properties:
        status:
          type: boolean 
          example: true
        message: 
          type: string
          example: "register successful"

    login:
      type: object 
      required:
        - email 
        - password
      properties:
        email:
          type: string
          example: example@gmail.com
        password:
          type: string
          example: Example*010203

    loginSuccessful:
      type: object
      properties:
        status:
          type: boolean 
          example: true
        message: 
          type: string
          example: 'login successful'

    getUsers:
      type: object
      properties:
        status:
          type: boolean
          example: true
        message:
          type: string
          example: 'Users successfully obtained'
        data:
          type: array
          items:
            type: object
            properties:
              user_id:
                type: string
                example: 75bf810c-6173-469c-b6e2-9351f4154d8b
              name:
                type: string
                example: name
              last_name:
                type: string
                example: last name
              dni:
                type: number
                example: 11222333
              email:
                type: string
                example: example@gmail.com
              hashed_password:
                type: string
                example: $2a$10$nB0nEORNdwl9o.WQpWN5OOV0ZGgvThr5ProVImaFZ9FFuUi6CebQi
              rol:
                type: string
                example: USER
              is_connected:
                type: boolean
                example: false
              created_at:
                type: string
                format: date-time
                example: 2024-09-23T23:58:34.286Z
              updated_at:
                type: string
                format: date-time
                nullable: true
                example: 2024-09-23T23:58:34.286Z

    updateUser:
      type: object 
      required:
        - userId
      properties:
        userId:
          type: string
          example: 75bf810c-6173-469c-b6e2-9351f4154d8b
        name:
          type: string
          example: name
        lastName:
          type: string 
          example: last name 
        dni:
          type: number
          example: 25542586
        email: 
          type: string 
          example: example@gmail.com
        password: 
          type: string
          example: Example*010203

    updateSuccessful:
      type: object
      properties:
        status:
          type: boolean 
          example: true
        message: 
          type: string
          example: 'the user updated successful'

    deleteUser: 
      type: object 
      required:
        - userId
      properties:
        userId:
          type: string
          example: 75bf810c-6173-469c-b6e2-9351f4154d8b

    deleteSuccessful:
      type: object
      properties:
        status:
          type: boolean 
          example: true
        message: 
          type: string
          example: 'delete user successful'
      
    zodError:
      type: object
      properties:
        status: 
          type: boolean 
          example: false
        issues: 
          type: array
          items:
            type: object 
            properties: 
              field: 
                type: string 
                example: password
              message: 
                type: string
                example: required
    recordAlreadyExists:
      type: object
      properties: 
        status: 
          type: boolean 
          example: false
        message: 
          type: string
          example: record already exists
    recordNotFound:
      type: object
      properties:
        status: 
          type: boolean 
          example: false
        message: 
          type: string 
          example: record not exist
    incorrectPassword:
      type: object
      properties:
        status:
          type: boolean 
          example: false
        message:  
          type: string
          example: incorrect password
    internalServerError:
      type: object
      properties:
        status:
          type: boolean 
          example: false
        message:
          type: string
          example: internal server error
